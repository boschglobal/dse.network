/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Tue Jan  9 15:02:17 2024.
 */

#ifndef STUB_H
#define STUB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define STUB_EXAMPLE_MESSAGE_FRAME_ID (0x1f0u)
#define STUB_EXAMPLE_MESSAGE2_FRAME_ID (0x1f1u)
#define STUB_FUNCTION_EXAMPLE_FRAME_ID (0x1f2u)
#define STUB_UNSIGNED_TYPES_FRAME_ID (0x1f3u)
#define STUB_SIGNED_TYPES_FRAME_ID (0x1f4u)
#define STUB_FLOAT_TYPES_FRAME_ID (0x1f5u)
#define STUB_SCHEDULED_MESSAGE_FRAME_ID (0x1f6u)

/* Frame lengths in bytes. */
#define STUB_EXAMPLE_MESSAGE_LENGTH (8u)
#define STUB_EXAMPLE_MESSAGE2_LENGTH (8u)
#define STUB_FUNCTION_EXAMPLE_LENGTH (8u)
#define STUB_UNSIGNED_TYPES_LENGTH (16u)
#define STUB_SIGNED_TYPES_LENGTH (16u)
#define STUB_FLOAT_TYPES_LENGTH (16u)
#define STUB_SCHEDULED_MESSAGE_LENGTH (8u)

/* Extended or standard frame types. */
#define STUB_EXAMPLE_MESSAGE_IS_EXTENDED (0)
#define STUB_EXAMPLE_MESSAGE2_IS_EXTENDED (0)
#define STUB_FUNCTION_EXAMPLE_IS_EXTENDED (0)
#define STUB_UNSIGNED_TYPES_IS_EXTENDED (0)
#define STUB_SIGNED_TYPES_IS_EXTENDED (0)
#define STUB_FLOAT_TYPES_IS_EXTENDED (0)
#define STUB_SCHEDULED_MESSAGE_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define STUB_SCHEDULED_MESSAGE_CYCLE_TIME_MS (10u)

/* Signal choices. */


/**
 * Signals in message ExampleMessage.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_example_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable;

    /**
     * Range: 0..50 (0..5 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t average_radius;

    /**
     * Range: -2048..2047 (229.52..270.47 degK)
     * Scale: 0.01
     * Offset: 250
     */
    int16_t temperature;
};

/**
 * Signals in message ExampleMessage2.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_example_message2_t {
    /**
     * Range: 0..50 (0..5 m)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t radius;
};

/**
 * Signals in message FunctionExample.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_function_example_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alive;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t foo;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bar;
};

/**
 * Signals in message UnsignedTypes.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_unsigned_types_t {
    /**
     * Range: 0..250 (0..250 uint8)
     * Scale: 1
     * Offset: 0
     */
    uint8_t u_int8_signal;

    /**
     * Range: 0..1000 (0..1000 uint16)
     * Scale: 1
     * Offset: 0
     */
    uint16_t u_int16_signal;

    /**
     * Range: 0..40000 (0..40000 uint32)
     * Scale: 1
     * Offset: 0
     */
    uint32_t u_int32_signal;

    /**
     * Range: 0..800000 (0..800000 uint64)
     * Scale: 1
     * Offset: 0
     */
    uint64_t u_int64_signal;
};

/**
 * Signals in message SignedTypes.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_signed_types_t {
    /**
     * Range: -128..127 (-128..127 int8)
     * Scale: 1
     * Offset: 0
     */
    int8_t int8_signal;

    /**
     * Range: -2501..2500 (-2501..2500 int16)
     * Scale: 1
     * Offset: 0
     */
    int16_t int16_signal;

    /**
     * Range: -210001..210000 (-210001..210000 int32)
     * Scale: 1
     * Offset: 0
     */
    int32_t int32_signal;

    /**
     * Range: -900001..900000 (-900001..900000 int64)
     * Scale: 1
     * Offset: 0
     */
    int64_t int64_signal;
};

/**
 * Signals in message FloatTypes.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_float_types_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int64_t double_signal;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t float_signal;
};

/**
 * Signals in message ScheduledMessage.
 *
 * All signal values are as on the CAN bus.
 */
struct stub_scheduled_message_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t schedule_signal;
};

/**
 * Pack message ExampleMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_example_message_pack(
    uint8_t *dst_p,
    const struct stub_example_message_t *src_p,
    size_t size);

/**
 * Unpack message ExampleMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_example_message_unpack(
    struct stub_example_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_example_message_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_example_message_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_example_message_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_example_message_average_radius_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_example_message_average_radius_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_example_message_average_radius_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t stub_example_message_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_example_message_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_example_message_temperature_is_in_range(int16_t value);

/**
 * Pack message ExampleMessage2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_example_message2_pack(
    uint8_t *dst_p,
    const struct stub_example_message2_t *src_p,
    size_t size);

/**
 * Unpack message ExampleMessage2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_example_message2_unpack(
    struct stub_example_message2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_example_message2_radius_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_example_message2_radius_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_example_message2_radius_is_in_range(uint8_t value);

/**
 * Pack message FunctionExample.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_function_example_pack(
    uint8_t *dst_p,
    const struct stub_function_example_t *src_p,
    size_t size);

/**
 * Unpack message FunctionExample.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_function_example_unpack(
    struct stub_function_example_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_function_example_crc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_function_example_crc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_function_example_crc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_function_example_alive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_function_example_alive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_function_example_alive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_function_example_foo_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_function_example_foo_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_function_example_foo_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_function_example_bar_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_function_example_bar_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_function_example_bar_is_in_range(uint8_t value);

/**
 * Pack message UnsignedTypes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_unsigned_types_pack(
    uint8_t *dst_p,
    const struct stub_unsigned_types_t *src_p,
    size_t size);

/**
 * Unpack message UnsignedTypes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_unsigned_types_unpack(
    struct stub_unsigned_types_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_unsigned_types_u_int8_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_unsigned_types_u_int8_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_unsigned_types_u_int8_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t stub_unsigned_types_u_int16_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_unsigned_types_u_int16_signal_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_unsigned_types_u_int16_signal_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t stub_unsigned_types_u_int32_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_unsigned_types_u_int32_signal_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_unsigned_types_u_int32_signal_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t stub_unsigned_types_u_int64_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_unsigned_types_u_int64_signal_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_unsigned_types_u_int64_signal_is_in_range(uint64_t value);

/**
 * Pack message SignedTypes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_signed_types_pack(
    uint8_t *dst_p,
    const struct stub_signed_types_t *src_p,
    size_t size);

/**
 * Unpack message SignedTypes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_signed_types_unpack(
    struct stub_signed_types_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t stub_signed_types_int8_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_signed_types_int8_signal_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_signed_types_int8_signal_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t stub_signed_types_int16_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_signed_types_int16_signal_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_signed_types_int16_signal_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t stub_signed_types_int32_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_signed_types_int32_signal_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_signed_types_int32_signal_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t stub_signed_types_int64_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_signed_types_int64_signal_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_signed_types_int64_signal_is_in_range(int64_t value);

/**
 * Pack message FloatTypes.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_float_types_pack(
    uint8_t *dst_p,
    const struct stub_float_types_t *src_p,
    size_t size);

/**
 * Unpack message FloatTypes.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_float_types_unpack(
    struct stub_float_types_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t stub_float_types_double_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_float_types_double_signal_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_float_types_double_signal_is_in_range(int64_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t stub_float_types_float_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_float_types_float_signal_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_float_types_float_signal_is_in_range(int32_t value);

/**
 * Pack message ScheduledMessage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int stub_scheduled_message_pack(
    uint8_t *dst_p,
    const struct stub_scheduled_message_t *src_p,
    size_t size);

/**
 * Unpack message ScheduledMessage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int stub_scheduled_message_unpack(
    struct stub_scheduled_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t stub_scheduled_message_schedule_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double stub_scheduled_message_schedule_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool stub_scheduled_message_schedule_signal_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
